import requests
import json
import re
import time
from datetime import datetime
from .checklist_transfer import add_checklist_to_task
from .commets import add_comment_with_mentions
from .description import transfer_description
from config_map_category_and_priority import BITRIX_ID_IMPORTANCE_TO_CLICKUP_PRIORITY
from get_task_category import get_task_importance, get_task_category
from .set_custom_field import set_custom_fields
# üîπ –í–∞—à–∏ API –∫–ª—é—á–∏
BITRIX24_WEBHOOK_URL = 'https://bit.paypoint.pro/rest/334/ns8ufic41u9h1nla/'
CLICKUP_API_KEY = 'pk_87773460_IA6NSWKD8W9PLWU480KIDV4ED6YATJNU'
CLICKUP_LIST_ID = '901508672918'
FILTER_PATTERNS = [
    r'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫, –∏–Ω–∞—á–µ –∑–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤–æ–≤—Ä–µ–º—è\.',
    r'–≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–º\.',
    r'–∑–∞–¥–∞—á–∞ –ø–æ—á—Ç–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞\.',
    r'–∑–∞–¥–∞—á–∞\s+–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
    r'–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞',
    r'–ü—Ä–æ–µ–∫—Ç –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞'


]
BITRIX_TO_CLICKUP_USERS = {
    # "–ú–∞—Ä–∏—è –ù–æ–≤–∏–∫–æ–≤–∞": 48467541,
    "–î–∞–Ω–∏–ª –ö—É—á–µ—Ä—É–∫": 87773460,
    # "–ò–≤–∞–Ω –ñ—É–∫–æ–≤" : 152444604,
    # "Maria": 152420871,
    # "Ivan Zhukov": 152444606,
    # "Gena": 170510061
}

MAP_USER_ID_BITRIX_TO_CLICKUP = {
    334 : 87773460,
    6 : 48467541,
    1 : 152444606
}


def convert_bitrix_quotes(comment_text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ Bitrix ([QUOTE]...[/QUOTE])"""
    
    def quote_replacement(match):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ü–∏—Ç–∞—Ç—É
        user_text = match.group(1).strip()
        
        parts = user_text.split("\n", 1)
    
        if len(parts) == 2:
            user_line, quote_content = parts
        else:
            # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑—å–º–µ–º –≤—Å–µ –∫–∞–∫ –æ–¥–Ω—É —á–∞—Å—Ç—å
            user_line, quote_content = parts[0], ""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É —Å –Ω—É–∂–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º, –Ω–æ –∏–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        formatted_quote = "\n".join([f"| {line}" for line in quote_content.split("\n") if line.strip()])
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å–Ω–∞—á–∞–ª–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º —Ü–∏—Ç–∞—Ç–∞
        return f"{user_line}\n{formatted_quote}"




    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã
    comment_text = re.sub(r'\[QUOTE(?:=[^\]]+)?\](.*?)\[/QUOTE\]', quote_replacement, comment_text, flags=re.DOTALL)

    return comment_text.strip()

def format_comment_for_clickup(formatted_comment, comment_text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è ClickUp."""
    
    if comment_text.strip():
        formatted_comment.append({
            "text": comment_text.strip(),
            "attributes": {}
        })

    return formatted_comment

def convert_bitrix_comment(comment_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π Bitrix –¥–ª—è ClickUp, –∑–∞–º–µ–Ω—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bitrix –Ω–∞ –∏—Ö ID ClickUp."""
    def replace_user(match):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ Bitrix
        user_name = match.group(2)
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ClickUp –ø–æ –∏–º–µ–Ω–∏
        clickup_user_id = BITRIX_TO_CLICKUP_USERS.get(user_name)
        if clickup_user_id:
            return f"@{user_name}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            return f"@{user_name}"  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ ClickUp, —Ç–æ —Ç–∞–∫ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º

    # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Bitrix –Ω–∞ –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ ClickUp
    comment_text = re.sub(r'\[USER=(\d+)\](.*?)\[/USER\]', replace_user, comment_text)
    comment_text = convert_bitrix_quotes(comment_text)
    comment_text = re.sub(r'\[URL=(.*?)\](.*?)\[/URL\]', r'\1', comment_text)
    # comment_text = re.sub(r'\[.*?\]', '', comment_text)  # –£–±–∏—Ä–∞–µ–º BB-–∫–æ–¥—ã
    return comment_text.strip()

def filter_comment(comment_text):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º."""
    for pattern in FILTER_PATTERNS:
        if re.search(pattern, comment_text, re.IGNORECASE):
            return None
    return comment_text

def get_bitrix_comments(task_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ Bitrix24."""
    url = f"{BITRIX24_WEBHOOK_URL}task.commentitem.getList"
    try:
        response = requests.get(url, params={"taskId": task_id})
        response.raise_for_status()
        comments = []
        for c in response.json().get('result', []):
            author = c.get('AUTHOR_NAME', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
            post_date = c.get('POST_DATE', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            text = convert_bitrix_comment(c.get('POST_MESSAGE', ''))
            text = filter_comment(text)
            date_obj = datetime.fromisoformat(post_date)
            readable_date = date_obj.strftime("%d %B %Y, %H:%M:%S")
            comment_header = f"{author}       {readable_date} \n"
            comment_header2 = "\n"
            formatted_comment = []
            comments.append(format_comment_for_clickup(formatted_comment, comment_header))
            comments.append(format_comment_for_clickup(formatted_comment, comment_header2))
            if text:
                formatted_comment = format_comment_for_clickup(formatted_comment,text)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å—Ç—Ä–æ–∫—É
                comment_str = ''.join([comment.get('text', '') for comment in formatted_comment])
                comment_str = comment_str.replace("@–ú–∞—Ä–∏—è –ù–æ–≤–∏–∫–æ–≤–∞", "@Maria Novikova")
                comment_str = comment_str.replace("@–î–∞–Ω–∏–ª –ö—É—á–µ—Ä—É–∫", "@Danil Kucheruk")
                comment_str = comment_str.replace("@–ú–∞—Ä–∏—è –ù–æ–≤–∏–∫–æ–≤–∞", "@Maria Novikova")
                # comment_str = comment_str.replace("@–ò–≤–∞–Ω –ñ—É–∫–æ–≤", "@Ivan Zhukov")
                comments.append(comment_str)
        return comments  
        
    except requests.exceptions.RequestException as e:
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ Bitrix –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return []

def add_clickup_comment(task_id, comment):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ ClickUp."""
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª–∏–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    cleaned_comment = '\n\n'.join([str(c).strip() for c in comment if isinstance(c, str)])
    add_comment_with_mentions(task_id, cleaned_comment)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –∏–∑ Bitrix24
def get_bitrix_task(task_id):
    url = f"{BITRIX24_WEBHOOK_URL}tasks.task.get.json"
    try:
        response = requests.get(url, params={"taskId": task_id})
        response.raise_for_status()
        task = response.json().get('result', {}).get('task')
        if task:
            print(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Bitrix24.")
        return task
    except requests.exceptions.RequestException as e:
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –∏–∑ Bitrix: {e}")
        return None


def get_bitrix_tags(task_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –∑–∞–¥–∞—á–∏ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫."""
    url = f"{BITRIX24_WEBHOOK_URL}tasks.task.get.json"
    params = {
        "taskId": task_id,
        "select[]": ["TAGS"]
    }

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        task = response.json().get('result', {}).get('task')

        if task and "tags" in task:
            tags_data = task["tags"]
            tags_list = []
            
            if isinstance(tags_data, dict):
                # –ï—Å–ª–∏ tags - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                for tag_data in tags_data.values():
                    if isinstance(tag_data, dict) and 'title' in tag_data:
                        tags_list.append(tag_data['title'])
            elif isinstance(tags_data, list):
                # –ï—Å–ª–∏ tags - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                for tag_data in tags_data:
                    if isinstance(tag_data, dict) and 'title' in tag_data:
                        tags_list.append(tag_data['title'])
                    elif isinstance(tag_data, str):
                        tags_list.append(tag_data)
            
            # print(f"–¢–µ–≥–∏ –∑–∞–¥–∞—á–∏ {task_id}: {tags_list}")
            return tags_list
        else:
            # print(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥–æ–≤.")
            return []
    
    except Exception as e:
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return []

# üîπ –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑ Bitrix24 –Ω–∞ ClickUp

MAP_USER_ID_BITRIX_TO_CLICKUP = {
        334: 87773460,
        6: 48467541,
        1: 152444606
    }
    
def map_assignees(bitrix_task):
    clickupid = []
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑ Bitrix
    responsible = bitrix_task.get('responsible')
    if responsible:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if isinstance(responsible, dict):
            bitrix_user_id = int(responsible.get('id', 0))
        elif isinstance(responsible, list) and responsible:
            bitrix_user_id = int(responsible[0])
        else:
            bitrix_user_id = int(responsible) if str(responsible).isdigit() else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ bitrix_user_id –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
        if bitrix_user_id in MAP_USER_ID_BITRIX_TO_CLICKUP:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π clickup_id –≤ —Å–ø–∏—Å–æ–∫
            clickupid.append(MAP_USER_ID_BITRIX_TO_CLICKUP[bitrix_user_id])
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # print("Mapped Assignees (ClickUp IDs):")
    # print(clickupid)
    
    return clickupid


def map_watchers(bitrix_task):
    clickup_auditor_ids = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
    
    # print("DEBUG: auditorsData type:", type(bitrix_task.get('auditorsData')))
    # print("DEBUG: auditorsData value:", bitrix_task.get('auditorsData'))
    # print("DEBUG: auditors type:", type(bitrix_task.get('auditors')))
    # print("DEBUG: auditors value:", bitrix_task.get('auditors'))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ auditorsData (—Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∞—É–¥–∏—Ç–æ—Ä–æ–≤)
    auditorsData = bitrix_task.get('auditorsData')
    if auditorsData and isinstance(auditorsData, dict):
        # print("DEBUG: Processing auditorsData as dict")
        for auditor_id_str in auditorsData:
            auditor_id = int(auditor_id_str)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –∫–ª—é—á–∞ —Å–ª–æ–≤–∞—Ä—è
            # print(f"DEBUG: Processing auditor_id {auditor_id} from auditorsData")
            if auditor_id in MAP_USER_ID_BITRIX_TO_CLICKUP:
                clickup_auditor_ids.add(MAP_USER_ID_BITRIX_TO_CLICKUP[auditor_id])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ auditors (—Å–ø–∏—Å–æ–∫ ID –∞—É–¥–∏—Ç–æ—Ä–æ–≤)
    auditors = bitrix_task.get('auditors')
    if auditors and isinstance(auditors, list):
        # print("DEBUG: Processing auditors as list")
        for auditor_id_str in auditors:
            auditor_id = int(auditor_id_str)
            # print(f"DEBUG: Processing auditor_id {auditor_id} from auditors list")
            if auditor_id in MAP_USER_ID_BITRIX_TO_CLICKUP:
                clickup_auditor_ids.add(MAP_USER_ID_BITRIX_TO_CLICKUP[auditor_id])
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # print("Mapped Watchers (ClickUp IDs):")
    result = list(clickup_auditor_ids)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫
    # print(result)
    
    return result


# üîπ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ Bitrix –≤ ClickUp
def get_bitrix_priority(bitrix_task):
    bitrix_id = bitrix_task['id']
    tags = get_bitrix_tags(bitrix_id)
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–≥–æ–≤ –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã ClickUp
    # 4 - Urgent (–ü1)
    # 3 - High (–ü2, –ü2+)
    # 2 - Normal (–ü3, –ü3+)
    # 1 - Low (–ü4, –ü4+)
    
    for tag in tags:
        if tag == '–ü1':
            print(f"- –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {tag}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ClickUp: 4 (Urgent)")
            return 1
        elif tag in ['–ü2', '–ü2+']:
            print(f"- –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {tag}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ClickUp: 3 (High)")
            return 2
        elif tag in ['–ü3', '–ü3+']:
            print(f"- –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {tag}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ClickUp: 2 (Normal)")
            return 3
        elif tag in ['–ü4', '–ü4+']:
            print(f"- –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {tag}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ClickUp: 1 (Low)")
            return 4
    
    # –ï—Å–ª–∏ —Ç–µ–≥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    print("- –¢–µ–≥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    return None



def map_status(bitrix_task,tags):
    # 1 ‚Äî –≤—ã–≤–∞–ª–∏—Ç—å –æ—à–∏–±–∫—É? –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –±–¥ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–∏—Ö?
    # 2 ‚Äî –°–æ–∑–¥–∞–Ω–∞ => "–ù–µ –Ω–∞—á–∞—Ç–∞"
    # 3 ‚Äî (—ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—è–≤–∏—Ç—å—Å—è –≤ json, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ") => "–í —Ä–∞–±–æ—Ç–µ"
    # 4 ‚Äî –ñ–¥—ë—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è => –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥ "–û–∂–∏–¥–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", —Ç–æ "–ù–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", –∞ –µ—Å–ª–∏ —Ç–µ–≥–∞ –Ω–µ—Ç, —Ç–æ "–ñ–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è"
    # 5 ‚Äî –ó–∞–≤–µ—Ä—à–µ–Ω–∞ => "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"

    

    MAP_STATUS_BITRIX_TO_CLICKUP = {
        3: "to do",  # In Progress -> to do
        2: "to do",  # Planning -> to do
        4: "to do",  # Ready for Review -> to do
        5: "complete"  # Done -> complete
    }


    bitrix_status = int(bitrix_task['status'])

    return MAP_STATUS_BITRIX_TO_CLICKUP[bitrix_status]


def update_task_add_watchers(task_id, watchers):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ ClickUp –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π."""
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    url = f'https://api.clickup.com/api/v2/task/{task_id}'
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'Authorization': CLICKUP_API_KEY,  # –í–∞—à API –∫–ª—é—á
        'accept': 'application/json',       # –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        'content-type': 'application/json'  # –£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    }
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π)
    data = {
        "watchers": {
            "add" : watchers
        }  
    }

    # print(data, task_id)

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞
        response = requests.put(url, headers=headers, json=data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            print(f"–ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ ClickUp.")
        else:
            # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {response.status_code} - {response.text}")

    except requests.exceptions.RequestException as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

    
# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ ClickUp
def create_clickup_task(name, description, assignees, priority,status, date_created, deadline, bitrix_tags):
    url = f'https://api.clickup.com/api/v2/list/{CLICKUP_LIST_ID}/task'
    headers = {
        'Authorization': CLICKUP_API_KEY,
        'Content-Type': 'application/json'
    }
    data = {
        "name": name, 
        "markdown_content": description, 
        "assignees": assignees, 
        "status" : status,
        "start_date": date_created,
        "due_date": deadline,
        "tags": bitrix_tags
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if priority is not None:
        data["priority"] = priority
    try:
        response = requests.post(url, headers=headers, json=data)
        print(f"API Response: {response.status_code} - {response.text}")
        response.raise_for_status()
        clickup_task_id = response.json().get('id')
        print(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ ClickUp: {clickup_task_id}")
        return clickup_task_id
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ ClickUp: {e}")
        return None

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ ClickUp
def create_clickup_subtask(parent_task_id, task_name, task_description, clickup_assign_ids, bitrix_priority,status, date_created, deadline,bitrix_tags):
    print(f"\n–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏:")
    print(f"- –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞: {parent_task_id}")
    print(f"- –ù–∞–∑–≤–∞–Ω–∏–µ: {task_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏
    if not parent_task_id or len(parent_task_id) < 5:
        print(f"- –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏")
        return None

    headers = {'Authorization': CLICKUP_API_KEY, 'Content-Type': 'application/json'}
    
    def get_parent_task(task_id, max_retries=3):
        """Get parent task information from ClickUp with retries"""
        url = f'https://api.clickup.com/api/v2/task/{task_id}'
        
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    print(f"- –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}")
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                
                response = requests.get(url, headers=headers, timeout=30)
                if response.status_code == 200:
                    return response.json()
                elif response.status_code == 429:  # Rate limit
                    print(f"- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    time.sleep(1)
                    continue
                else:
                    print(f"- –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            except requests.exceptions.Timeout:
                print(f"- –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏")
            except Exception as e:
                print(f"- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {str(e)}")
        
        return None
    
    def find_last_valid_parent(task_id):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏"""
        current_id = task_id
        path = []
        
        while current_id:
            parent_info = get_parent_task(current_id)
            if not parent_info:
                break
            current_id = parent_info.get('parent')
            if current_id:
                path.append(current_id)
        
        # –ï—Å–ª–∏ –≥–ª—É–±–∏–Ω–∞ –±–æ–ª—å—à–µ 6, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∑–∞–¥–∞—á–∏ –Ω–∞ 6-–º —É—Ä–æ–≤–Ω–µ
        if len(path) >= 6:
            return path[-(6+1)]  # –ë–µ—Ä–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 6-–º —É—Ä–æ–≤–Ω–µ
        return task_id
    
    def try_create_subtask(parent_id, max_retries=3, level=0):
        """Try to create a subtask under the specified parent with retries"""
        url = f'https://api.clickup.com/api/v2/list/{CLICKUP_LIST_ID}/task'
        data = {
            "name": task_name, 
            "markdown_content": task_description, 
            "assignees": clickup_assign_ids, 
            "status" : status,
            "start_date": date_created,
            "due_date": deadline,
            "tags": bitrix_tags
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if bitrix_priority is not None:
            data["priority"] = bitrix_priority
        
        # –î–æ–±–∞–≤–ª—è–µ–º parent —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if parent_id:
            data["parent"] = parent_id
        
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    print(f"- –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}")
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                
                response = requests.post(url, headers=headers, json=data, timeout=30)
                if response.status_code == 200:
                    return response
                elif response.status_code == 400 and "Level of nested subtasks is limited to 7" in response.text:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ª–∏–º–∏—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                    if parent_id:
                        print("- –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è")
                        last_valid_parent = find_last_valid_parent(parent_id)
                        if last_valid_parent and last_valid_parent != parent_id:
                            print(f"- –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–º —É—Ä–æ–≤–Ω–µ")
                            return try_create_subtask(last_valid_parent, max_retries)
                    return None
                elif response.status_code == 429:  # Rate limit
                    print(f"- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    time.sleep(5)
                    continue
                else:
                    print(f"- –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            except requests.exceptions.Timeout:
                print(f"- –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏")
            except Exception as e:
                print(f"- –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏: {str(e)}")
        
        return None
    
    try:
        current_parent_id = parent_task_id
        while True:
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É
            response = try_create_subtask(current_parent_id)
            
            if response is None:
                return None
            
            if response.status_code == 200:
                # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∑–∞–¥–∞—á—É
                task_id = response.json().get('id')
                print(f"- –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID: {task_id}")
                return task_id
            
            error_data = response.json()
            if error_data.get('err') == 'Level of nested subtasks is limited to 7' and error_data.get('ECODE') == 'ITEM_224':
                print("- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (7 —É—Ä–æ–≤–Ω–µ–π)")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
                parent_data = get_parent_task(current_parent_id)
                if not parent_data:
                    print("- –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ")
                    return None
                
                parent_of_parent = parent_data.get('parent')
                if parent_of_parent:
                    print(f"- –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ (—Ä–æ–¥–∏—Ç–µ–ª—å: {parent_of_parent})")
                    current_parent_id = parent_of_parent
                    continue
                else:
                    print("- –£ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É")
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è
                    url = f'https://api.clickup.com/api/v2/list/{CLICKUP_LIST_ID}/task'
                    data = {
                        "name": task_name, 
                        "markdown_content": task_description, 
                        "assignees": clickup_assign_ids, 
                        "priority": bitrix_priority,
                        "status" : status,
                        "start_date": date_created,
                        "due_date": deadline,
                        "tags": bitrix_tags
                    }
                    response = requests.post(url, headers=headers, json=data)
                    if response.status_code == 200:
                        task_id = response.json().get('id')
                        print(f"- –°–æ–∑–¥–∞–Ω–∞ –æ–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å ID: {task_id}")
                        return task_id
                    break
            else:
                print(f"- –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {response.text}")
                return None
                
    except Exception as e:
        print(f"- –û—à–∏–±–∫–∞: {str(e)}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"- –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e.response.text}")
        return None

# # üîπ –•–µ—à-–∫–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –∑–∞–¥–∞—á
# task_id_map = {}

# # üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ö–µ—à-–∫–∞—Ä—Ç—É
# def add_task_to_map(bitrix_task_id, clickup_task_id):
#     task_id_map[bitrix_task_id] = clickup_task_id


def convert_to_timestamp(date_str):
    if date_str:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
        dt = datetime.fromisoformat(date_str)
        # –ü–æ–ª—É—á–∞–µ–º timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1000 –¥–ª—è –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
        return int(dt.timestamp() * 1000)
    else:
        return None

def record_task_mapping(bitrix_id, clickup_task_id, mapping_file="mapping.txt"):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É ID –∑–∞–¥–∞—á–∏ –∏–∑ Bitrix –∏ ID –∑–∞–¥–∞—á–∏ –≤ ClickUp –≤ —Ñ–∞–π–ª mapping.txt."""
    try:
        with open(mapping_file, "a", encoding="utf-8") as f:
            f.write(f"{bitrix_id} - {clickup_task_id}\n")
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: Bitrix ID {bitrix_id} -> ClickUp ID {clickup_task_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")


def find_clickup_id(bitrix_id, mapping_file="mapping.txt"):
    """–ò—â–µ—Ç –≤ mapping —Ñ–∞–π–ª–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ Bitrix ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ClickUp ID, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω."""
    try:
        with open(mapping_file, "r", encoding="utf-8") as f:
            for line in f:
                # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: bitrix_id - clickup_id
                if line.startswith(f"{bitrix_id} - "):
                    parts = line.split(" - ")
                    if len(parts) >= 2:
                        return parts[1].strip()
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ mapping —Ñ–∞–π–ª–∞: {e}")
        return None


def transfer_task(task_ids):


    for task_id in task_ids:
        try:
            bitrix_task = get_bitrix_task(task_id)
            bitrix_tags = get_bitrix_tags(task_id)
            task_name = bitrix_task['title']
            task_description = transfer_description(bitrix_task)
            bitrix_priority = get_bitrix_priority(bitrix_task)
            bitrix_comments = get_bitrix_comments(task_id)
            date_created = convert_to_timestamp(bitrix_task.get('createdDate'))
            deadline = convert_to_timestamp(bitrix_task.get('deadline'))
            watchers = map_watchers(bitrix_task)
            clickup_assinged_id = map_assignees(bitrix_task)
            status = map_status(bitrix_task,bitrix_tags)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏
            if bitrix_task.get('parentId'):
                parent_id = bitrix_task.get('parentId')
                print(f"\n–ù–∞–π–¥–µ–Ω ParentID: {parent_id}")
                parent_clickup_id = find_clickup_id(parent_id)
                
                if parent_clickup_id:
                    print(f"–ù–∞–π–¥–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –≤ ClickUp: {parent_clickup_id}")
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É
                    clickup_task_id = create_clickup_subtask(parent_clickup_id, task_name, task_description, clickup_assinged_id, bitrix_priority, status, date_created, deadline, bitrix_tags)
                else:
                    print(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ {parent_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ClickUp, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É")
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É
                    clickup_task_id = create_clickup_task(task_name, task_description, clickup_assinged_id, bitrix_priority, status, date_created, deadline, bitrix_tags)
            else:
                print(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É
                clickup_task_id = create_clickup_task(task_name, task_description, clickup_assinged_id, bitrix_priority, status, date_created, deadline, bitrix_tags)

            # print(f"6. –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç—É—Å–∞")

            try:
                if clickup_task_id:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –∑–∞–¥–∞—á
                    record_task_mapping(task_id, clickup_task_id)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    add_clickup_comment(clickup_task_id, bitrix_comments)
                    update_task_add_watchers(clickup_task_id, watchers)
                    create_checklist(bitrix_task, clickup_task_id)
                    set_custom_fields(clickup_task_id, task_id)
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∏–∑ Bitrix {task_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ClickUp —Å ID {clickup_task_id}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ ClickUp –¥–ª—è Bitrix –∑–∞–¥–∞—á–∏ {task_id}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ ClickUp: {e}")
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ —Å ID {task_id}: {e}")
            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

def create_checklist(bitrix_task, clickup_task_id):
    try:
        checklist_data = bitrix_task.get('checkListTree', [])
        if checklist_data and clickup_task_id:
            with open('debug_checklist.json', 'w', encoding='utf-8') as f:
                json.dump(checklist_data, f, indent=2, ensure_ascii=False)

            if isinstance(checklist_data, (list, dict)): 
                add_checklist_to_task(clickup_task_id, checklist_data)
            else:
                print(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–ª–∏—Å—Ç–∞: {type(checklist_data)}")
        elif not clickup_task_id:  
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ ClickUp, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–æ–≤")
        else:
            print("–ß–µ–∫–ª–∏—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã–µ")

            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–ª–∏—Å—Ç–∞: {str(e)}")
        raise

if __name__ == "__main__":
    transfer_task([])
